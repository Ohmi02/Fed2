-----[ namespace ]-----
--creates a table, because everything is a table
--everything prefixed with the table name goes into the table
--local functions don't need to be namespaced
fedmap = fedmap or {}

-----[ tell mudlet that we're a legit mapper ]-----
mudlet = mudlet or {}
mudlet.mapper_script = true

-----[ place mapper in selected window ]-----
local mapper = Geyser.Mapper:new({
  name = "mapper",
  x = 0, y = 0, --coordinates
  width = "100%", height = "100%", --how big it is
}, FEDGUI.tabright_top.Mapcenter ) --the window the mapper is in
--not sure the mapper is able to go into this tab? maybe it needs a console put in the tab first?

--===begin actual mapping functions===--

-----[ get area ID ]-----
--this function returns the areaID, adding the area to the mudlet's mapper table if necessary

local function findAreaID(areaname)
	--areaname is expected to be gmcp.room.info.area
	local list = getAreaTable() --load mudlet's mapper table
	local areaID = -1
	if list[areaname] ~= nil then --not nil, so there is already an area with that name in the mapper table
		areaID = list[areaname] --get the value indexed to the area's name
	else --nil result, so the area name is NOT the mapper table and needs to be added
		areaID = addAreaName(areaname) --add the area to the mapper table, returning the new area ID
	end			
	return areaID
end


-----[ generate room coordinates ]-----
--rooms are built on a grid that is 64 sqares wide and 63 squares tall
--we only need to care about how wide the grid is to get the room coordinates
--calculate their location using the power of MATH

local function makeCoords(roomnum)
	--roomnum is expected to be gmcp.room.info.num
	local coordX = roomnum % 64 --modulus to get the column
--	  local coordY = roomnum // 64 --floor division to get the row
	local coordY = math.floor(roomnum / 64) --evidently mudlet has no native floor division
	--there is no Z coord returned because the underlying grid is flat
	return coordX, coordY
end


-----[ create room ]-----
function fedmap.makeRoom()
	local roomHash = gmcp.room.info.system .. "." .. gmcp.room.info.area .. "." .. gmcp.room.info.num
	local roomID = getRoomIDbyHash(roomHash)
	local areaID = findAreaID(gmcp.room.info.area)
	local coordX, coordY = makeCoords(gmcp.room.info.num)
	
	if roomID == -1 then -- -1 is returned if no room ID matches the hash
		roomID = createRoomID()
		setRoomIDbyHash(roomID, roomHash)
		addRoom(roomID, areaID)
		setRoomCoordinates(roomID, coordX, coordY, 0)
		setRoomName(roomID, gmcp.room.info.name)
	end
end

-----[ environments ]-----
local room_type = {
	--used to make rooms different colors based on their flags / flag combinations
	--'space' can appear by itself, 'orbit' and 'link' will always appear with 'space' and can appear with each other
	--'shuttlepad' and 'exchange' might appear together but usually wont
	--prioritize the lowest id when multiple environments overlap
	["link"] = {id = 1, unpack(color_table.ansiRed)},
	["orbit"] = {id = 2, unpack(color_table.ansiRed)},
	["space"] = {id = 3, unpack(color_table.ansiWhite)},
	["shuttlepad"] = {id = 4, unpack(color_table.ansiRed)},
	["exchange"] = {id = 5, unpack(color_table.ansiRed)}
	--'red' r128 g0 b0
	--'green' r0 g128 b0
	--'yellow' r128 g128 b0
	--'blue' r0 g0 b128
	--'magenta' r128 g0 b128
	--'cyan' r0 g128 b128
	--'white' r128 g128 b128
}
