-----[ namespace ]-----
--creates a table, because everything is a table
--everything prefixed with the table name goes into the table
--local functions don't need to be namespaced
fedmap = fedmap or {}

-----[ tell mudlet that we're a legit mapper ]-----
mudlet = mudlet or {}
mudlet.mapper_script = true

-----[ place mapper in selected window ]-----
local mapper = Geyser.Mapper:new({
  name = "mapper",
  x = 0, y = 0, --coordinates
  width = "100%", height = "100%", --how big it is
}, FEDGUI.tabright_top.Mapcenter ) --the window the mapper is in


--===begin useful mapping functions===--

-----[ set room environment ]-----
--set the room color and symbol based on the room's flags
--colors are the mapper defaults, found from getCustomEnvColorTable()
--if the 'link', 'orbit', 'shuttlepad', or 'exchange' flags are found, room is maroon
--having just the 'space' flag or no flags at all results in the room being grey
--rooms with the 'shuttlepad' flag get a star symbol so they're easy to find
--rooms with the 'exchange' flag get 'EX' as a symbol so they're easy to find
--not setting symbols on 'link' or 'orbit' flags because there's too much variety here to hardcode something
	--end users should be setng their own symbols through the mapper window
local function roomColor(roomID)
  local table = gmcp.room.info.flags
  if next(table) == nil then --the room's table of flags is empty
  	setRoomEnv(roomID, 263)
  else
  	for key,value in ipairs(table) do 		--take the values from the room's table of flags
		setRoomUserData(roomID, value, "true")	--put them into the room's user data
	end
	if getRoomUserData(roomID, "link") == "true" then --this room lets people jump to different systems
		--echo("link flag found")
		setRoomEnv(roomID, 257)
	elseif getRoomUserData(roomID, "orbit") == "true" then --this room lets people board their shuttle to land on the planet
		--echo("orbit flag found")
		setRoomEnv(roomID, 257)
	elseif getRoomUserData(roomID, "space") == "true" then --this is an ordinary space room with no orbits or system links
		--echo("space flag found")
		setRoomEnv(roomID, 272)
	elseif getRoomUserData(roomID, "shuttlepad") == "true" then --this room lets people board their shuttle to reach their spaceship
		--echo("shuttlepad flag found")
		setRoomEnv(roomID, 257)
		setRoomChar(roomID, "â˜…")
	elseif getRoomUserData(roomID, "exchange") == "true" then --this room lets people use the exchange features
		--echo("exchange flag found")
		setRoomEnv(roomID, 257)
		setRoomChar(roomID, "EX")
	else 					--we have no idea what this room is, panic
		--echo("other flag found")
		setRoomEnv(roomID, 259)
	end
  end
end

--===begin core mapping functions===--

-----[ get area ID ]-----
--this function returns the areaID, adding the area to the mudlet's mapper table if necessary
local function findAreaID(areaname)
	--areaname is expected to be gmcp.room.info.area
	local list = getAreaTable() --load mudlet's mapper table
	local areaID = -1
	if list[areaname] ~= nil then --not nil, so there is already an area with that name in the mapper table
		areaID = list[areaname] --get the value indexed to the area's name
	else --nil result, so the area name is NOT the mapper table and needs to be added
		areaID = addAreaName(areaname) --add the area to the mapper table, returning the new area ID
	end			
	return areaID
end


-----[ generate room coordinates ]-----
--rooms are built on a grid that is 64 sqares wide and 63 squares tall
--we only need to care about how wide the grid is to get the room coordinates
--calculate their location using the power of MATH
local function makeCoords(roomnum)
	--roomnum is expected to be gmcp.room.info.num
	local coordX = roomnum % 64 --modulus to get the column
	--local coordY = roomnum // 64 --floor division to get the row
	local coordY = math.floor(roomnum / 64) --evidently mudlet has no native floor division
	--there is no Z coord returned because the underlying grid is flat
	return coordX, -coordY
end
--Y is returned inverted because the game's map puts 0,0 at the top left
--and mudlet's map puts 0,0 in the center
--inverting Y syncs everything back up

-----[ create room ]-----
--generates a room if no room exists, and either way centers the map on the current location
--this is the function called when we receive gmcp.room data from the game
function fedmap.makeRoom()
	local roomHash = gmcp.room.info.system .. "." .. gmcp.room.info.area .. "." .. gmcp.room.info.num
	local roomID = getRoomIDbyHash(roomHash) --this will be -1 if no room ID matches the hash
	local areaID = findAreaID(gmcp.room.info.area)
	local coordX, coordY = makeCoords(gmcp.room.info.num)
	--echo(roomHash)
	
	if roomID == -1 then --no room yet exists with this roomHash
		roomID = createRoomID()
		setRoomIDbyHash(roomID, roomHash)
		addRoom(roomID, areaID)
		setRoomCoordinates(roomID, coordX, coordY, 0)
		setRoomName(roomID, gmcp.room.info.name)
		roomColor(roomID)
	end
	centerview(roomID)
end
